Tier 1
-- (abort w/ backtrace)
src/syscalls/tasks.rs-61-
src/syscalls/tasks.rs:62:#[no_mangle]
src/syscalls/tasks.rs-63-pub extern "C" fn sys_exit(arg: i32) -> ! {
-- (abort w/ backtrace)
src/syscalls/tasks.rs-76-
src/syscalls/tasks.rs:77:#[no_mangle]
src/syscalls/tasks.rs-78-pub extern "C" fn sys_abort() -> ! {
-- (abort w/ backtrace)
src/syscalls/mod.rs-96-
src/syscalls/mod.rs:97:#[no_mangle]
src/syscalls/mod.rs-98-pub extern "C" fn sys_shutdown(arg: i32) -> ! {
-- (ENOSYS)
src/syscalls/tasks.rs-207-#[cfg(feature = "newlib")]
src/syscalls/tasks.rs:208:#[no_mangle]
src/syscalls/tasks.rs-209-pub extern "C" fn sys_kill(dest: Tid, signum: i32) -> i32 {
-- (ENOSYS)
src/syscalls/tasks.rs-219-#[cfg(feature = "newlib")]
src/syscalls/tasks.rs:220:#[no_mangle]
src/syscalls/tasks.rs-221-pub extern "C" fn sys_signal(handler: SignalHandler) -> i32 {
-- (alloc)
src/syscalls/mod.rs-68-#[cfg(target_os = "none")]
src/syscalls/mod.rs:69:#[no_mangle]
src/syscalls/mod.rs-70-pub extern "C" fn sys_malloc(size: usize, align: usize) -> *mut u8 {
-- (alloc)
src/syscalls/mod.rs-74-#[cfg(target_os = "none")]
src/syscalls/mod.rs:75:#[no_mangle]
src/syscalls/mod.rs-76-pub extern "C" fn sys_realloc(ptr: *mut u8, size: usize, align: usize, new_size: usize) -> *mut u8 {
-- (alloc)
src/syscalls/mod.rs-80-#[cfg(target_os = "none")]
src/syscalls/mod.rs:81:#[no_mangle]
src/syscalls/mod.rs-82-pub extern "C" fn sys_free(ptr: *mut u8, size: usize, align: usize) {

Tier 2 (potentially bind to nn)
--
src/syscalls/tasks.rs-192-
src/syscalls/tasks.rs:193:#[no_mangle]
src/syscalls/tasks.rs-194-pub extern "C" fn sys_yield() {
--
src/syscalls/tasks.rs-132-
src/syscalls/tasks.rs:133:#[no_mangle]
src/syscalls/tasks.rs-134-pub extern "C" fn sys_usleep(usecs: u64) {
--
src/syscalls/tasks.rs-137-
src/syscalls/tasks.rs:138:#[no_mangle]
src/syscalls/tasks.rs-139-pub extern "C" fn sys_msleep(ms: u32) {
--
src/syscalls/tasks.rs-163-
src/syscalls/tasks.rs:164:#[no_mangle]
src/syscalls/tasks.rs-165-pub extern "C" fn sys_nanosleep(rqtp: *const timespec, rmtp: *mut timespec) -> i32 {
--
src/syscalls/tasks.rs-71-
src/syscalls/tasks.rs:72:#[no_mangle]
src/syscalls/tasks.rs-73-pub extern "C" fn sys_thread_exit(arg: i32) -> ! {
--
src/syscalls/tasks.rs-183-#[cfg(feature = "newlib")]
src/syscalls/tasks.rs:184:#[no_mangle]
src/syscalls/tasks.rs-185-pub extern "C" fn sys_clone(id: *mut Tid, func: extern "C" fn(usize), arg: usize) -> i32 {
--
src/syscalls/tasks.rs-291-
src/syscalls/tasks.rs:292:#[no_mangle]
src/syscalls/tasks.rs-293-pub extern "C" fn sys_join(id: Tid) -> i32 {
--
src/syscalls/tasks.rs-311-/// Set the current task state to `blocked`
src/syscalls/tasks.rs:312:#[no_mangle]
src/syscalls/tasks.rs-313-pub extern "C" fn sys_block_current_task() {
--
src/syscalls/tasks.rs-317-/// Set the current task state to `blocked`
src/syscalls/tasks.rs:318:#[no_mangle]
src/syscalls/tasks.rs-319-pub extern "C" fn sys_block_current_task_with_timeout(timeout: u64) {
--
src/syscalls/tasks.rs-331-/// Wake up the task with the identifier `id`
src/syscalls/tasks.rs:332:#[no_mangle]
src/syscalls/tasks.rs-333-pub extern "C" fn sys_wakeup_task(id: Tid) {
--
src/syscalls/tasks.rs-244-
src/syscalls/tasks.rs:245:#[no_mangle]
src/syscalls/tasks.rs-246-pub extern "C" fn sys_spawn2(
--
src/syscalls/tasks.rs-273-
src/syscalls/tasks.rs:274:#[no_mangle]
src/syscalls/tasks.rs-275-pub extern "C" fn sys_spawn(
--
src/syscalls/futex.rs-39-
src/syscalls/futex.rs:40:#[no_mangle]
src/syscalls/futex.rs-41-pub extern "C" fn sys_futex_wait(
--
src/syscalls/futex.rs-61-
src/syscalls/futex.rs:62:#[no_mangle]
src/syscalls/futex.rs-63-pub extern "C" fn sys_futex_wake(address: *mut u32, count: i32) -> i32 {
--
src/syscalls/recmutex.rs-19-
src/syscalls/recmutex.rs:20:#[no_mangle]
src/syscalls/recmutex.rs-21-pub extern "C" fn sys_recmutex_init(recmutex: *mut *mut RecursiveMutex) -> i32 {
--
src/syscalls/recmutex.rs-38-
src/syscalls/recmutex.rs:39:#[no_mangle]
src/syscalls/recmutex.rs-40-pub extern "C" fn sys_recmutex_destroy(recmutex: *mut RecursiveMutex) -> i32 {
--
src/syscalls/recmutex.rs-54-
src/syscalls/recmutex.rs:55:#[no_mangle]
src/syscalls/recmutex.rs-56-pub extern "C" fn sys_recmutex_lock(recmutex: *mut RecursiveMutex) -> i32 {
--
src/syscalls/recmutex.rs-70-
src/syscalls/recmutex.rs:71:#[no_mangle]
src/syscalls/recmutex.rs-72-pub extern "C" fn sys_recmutex_unlock(recmutex: *mut RecursiveMutex) -> i32 {
--
src/syscalls/mod.rs-105-
src/syscalls/mod.rs:106:#[no_mangle]
src/syscalls/mod.rs-107-pub extern "C" fn sys_unlink(name: *const u8) -> i32 {
--
src/syscalls/mod.rs-120-
src/syscalls/mod.rs:121:#[no_mangle]
src/syscalls/mod.rs-122-pub extern "C" fn sys_mkdir(name: *const u8, mode: u32) -> i32 {
--
src/syscalls/mod.rs-135-
src/syscalls/mod.rs:136:#[no_mangle]
src/syscalls/mod.rs-137-pub extern "C" fn sys_rmdir(name: *const u8) -> i32 {
--
src/syscalls/mod.rs-144-
src/syscalls/mod.rs:145:#[no_mangle]
src/syscalls/mod.rs-146-pub extern "C" fn sys_stat(name: *const u8, stat: *mut FileAttr) -> i32 {
--
src/syscalls/mod.rs-153-
src/syscalls/mod.rs:154:#[no_mangle]
src/syscalls/mod.rs-155-pub extern "C" fn sys_lstat(name: *const u8, stat: *mut FileAttr) -> i32 {
--
src/syscalls/mod.rs-163-
src/syscalls/mod.rs:164:#[no_mangle]
src/syscalls/mod.rs-165-pub extern "C" fn sys_fstat(fd: FileDescriptor, stat: *mut FileAttr) -> i32 {
--
src/syscalls/mod.rs-172-
src/syscalls/mod.rs:173:#[no_mangle]
src/syscalls/mod.rs-174-pub extern "C" fn sys_opendir(name: *const u8) -> FileDescriptor {
--
src/syscalls/mod.rs-181-
src/syscalls/mod.rs:182:#[no_mangle]
src/syscalls/mod.rs-183-pub extern "C" fn sys_open(name: *const u8, flags: i32, mode: i32) -> FileDescriptor {
--
src/syscalls/mod.rs-191-
src/syscalls/mod.rs:192:#[no_mangle]
src/syscalls/mod.rs-193-pub extern "C" fn sys_close(fd: FileDescriptor) -> i32 {
--
src/syscalls/mod.rs-201-
src/syscalls/mod.rs:202:#[no_mangle]
src/syscalls/mod.rs-203-pub extern "C" fn sys_read(fd: FileDescriptor, buf: *mut u8, len: usize) -> isize {
--
src/syscalls/mod.rs-211-
src/syscalls/mod.rs:212:#[no_mangle]
src/syscalls/mod.rs-213-pub extern "C" fn sys_write(fd: FileDescriptor, buf: *const u8, len: usize) -> isize {
--
src/syscalls/mod.rs-221-
src/syscalls/mod.rs:222:#[no_mangle]
src/syscalls/mod.rs-223-pub extern "C" fn sys_ioctl(fd: FileDescriptor, cmd: i32, argp: *mut core::ffi::c_void) -> i32 {
--
src/syscalls/mod.rs-234-
src/syscalls/mod.rs:235:#[no_mangle]
src/syscalls/mod.rs-236-pub extern "C" fn sys_lseek(fd: FileDescriptor, offset: isize, whence: i32) -> isize {
--
src/syscalls/mod.rs-246-
src/syscalls/mod.rs:247:#[no_mangle]
src/syscalls/mod.rs-248-pub extern "C" fn sys_readdir(fd: FileDescriptor) -> DirectoryEntry {
--
src/syscalls/mod.rs-255-
src/syscalls/mod.rs:256:#[no_mangle]
src/syscalls/mod.rs-257-pub extern "C" fn sys_dup(fd: i32) -> i32 {
--
src/syscalls/semaphore.rs-24-
src/syscalls/semaphore.rs:25:#[no_mangle]
src/syscalls/semaphore.rs-26-pub extern "C" fn sys_sem_init(sem: *mut *mut Semaphore, value: u32) -> i32 {
--
src/syscalls/semaphore.rs-47-
src/syscalls/semaphore.rs:48:#[no_mangle]
src/syscalls/semaphore.rs-49-pub extern "C" fn sys_sem_destroy(sem: *mut Semaphore) -> i32 {
--
src/syscalls/semaphore.rs-70-
src/syscalls/semaphore.rs:71:#[no_mangle]
src/syscalls/semaphore.rs-72-pub extern "C" fn sys_sem_post(sem: *const Semaphore) -> i32 {
--
src/syscalls/semaphore.rs-95-
src/syscalls/semaphore.rs:96:#[no_mangle]
src/syscalls/semaphore.rs-97-pub extern "C" fn sys_sem_trywait(sem: *const Semaphore) -> i32 {
--
src/syscalls/semaphore.rs-121-
src/syscalls/semaphore.rs:122:#[no_mangle]
src/syscalls/semaphore.rs-123-pub extern "C" fn sys_sem_timedwait(sem: *const Semaphore, ms: u32) -> i32 {
--
src/syscalls/semaphore.rs-130-
src/syscalls/semaphore.rs:131:#[no_mangle]
src/syscalls/semaphore.rs-132-pub extern "C" fn sys_sem_cancelablewait(sem: *const Semaphore, ms: u32) -> i32 {
--
src/syscalls/spinlock.rs-31-
src/syscalls/spinlock.rs:32:#[no_mangle]
src/syscalls/spinlock.rs-33-pub extern "C" fn sys_spinlock_init(lock: *mut *mut SpinlockContainer<'_>) -> i32 {
--
src/syscalls/spinlock.rs-48-
src/syscalls/spinlock.rs:49:#[no_mangle]
src/syscalls/spinlock.rs-50-pub extern "C" fn sys_spinlock_destroy(lock: *mut SpinlockContainer<'_>) -> i32 {
--
src/syscalls/spinlock.rs-67-
src/syscalls/spinlock.rs:68:#[no_mangle]
src/syscalls/spinlock.rs-69-pub extern "C" fn sys_spinlock_lock(lock: *mut SpinlockContainer<'_>) -> i32 {
--
src/syscalls/spinlock.rs-86-
src/syscalls/spinlock.rs:87:#[no_mangle]
src/syscalls/spinlock.rs-88-pub extern "C" fn sys_spinlock_unlock(lock: *mut SpinlockContainer<'_>) -> i32 {
--
src/syscalls/spinlock.rs-106-
src/syscalls/spinlock.rs:107:#[no_mangle]
src/syscalls/spinlock.rs-108-pub extern "C" fn sys_spinlock_irqsave_init(lock: *mut *mut SpinlockIrqSaveContainer<'_>) -> i32 {
--
src/syscalls/spinlock.rs-123-
src/syscalls/spinlock.rs:124:#[no_mangle]
src/syscalls/spinlock.rs-125-pub extern "C" fn sys_spinlock_irqsave_destroy(lock: *mut SpinlockIrqSaveContainer<'_>) -> i32 {
--
src/syscalls/spinlock.rs-142-
src/syscalls/spinlock.rs:143:#[no_mangle]
src/syscalls/spinlock.rs-144-pub extern "C" fn sys_spinlock_irqsave_lock(lock: *mut SpinlockIrqSaveContainer<'_>) -> i32 {
--
src/syscalls/spinlock.rs-161-
src/syscalls/spinlock.rs:162:#[no_mangle]
src/syscalls/spinlock.rs-163-pub extern "C" fn sys_spinlock_irqsave_unlock(lock: *mut SpinlockIrqSaveContainer<'_>) -> i32 {
--
src/syscalls/processor.rs-7-/// Returns the number of processors currently online.
src/syscalls/processor.rs:8:#[no_mangle]
src/syscalls/processor.rs-9-pub extern "C" fn sys_get_processor_count() -> usize {
--
src/syscalls/processor.rs-17-/// Returns the processor frequency in MHz.
src/syscalls/processor.rs:18:#[no_mangle]
src/syscalls/processor.rs-19-pub extern "C" fn sys_get_processor_frequency() -> u16 {
--
src/syscalls/timer.rs-78-
src/syscalls/timer.rs:79:#[no_mangle]
src/syscalls/timer.rs-80-pub extern "C" fn sys_clock_getres(clock_id: u64, res: *mut timespec) -> i32 {
--
src/syscalls/timer.rs-119-
src/syscalls/timer.rs:120:#[no_mangle]
src/syscalls/timer.rs-121-pub extern "C" fn sys_clock_gettime(clock_id: u64, tp: *mut timespec) -> i32 {
--
src/syscalls/timer.rs-172-
src/syscalls/timer.rs:173:#[no_mangle]
src/syscalls/timer.rs-174-pub extern "C" fn sys_clock_nanosleep(
--
src/syscalls/timer.rs-188-
src/syscalls/timer.rs:189:#[no_mangle]
src/syscalls/timer.rs-190-pub extern "C" fn sys_clock_settime(clock_id: u64, tp: *const timespec) -> i32 {
--
src/syscalls/timer.rs-215-
src/syscalls/timer.rs:216:#[no_mangle]
src/syscalls/timer.rs-217-pub extern "C" fn sys_gettimeofday(tp: *mut timeval, tz: usize) -> i32 {
--
src/syscalls/timer.rs-230-
src/syscalls/timer.rs:231:#[no_mangle]
src/syscalls/timer.rs-232-pub extern "C" fn sys_setitimer(
--
src/syscalls/entropy.rs-51-/// * `-ENOSYS` if the system does not support random data generation.
src/syscalls/entropy.rs:52:#[no_mangle]
pub unsafe extern "C" fn sys_read_entropy(buf: *mut u8, len: usize, flags: u32) -> isize {
--
src/syscalls/entropy.rs-61-#[cfg(not(feature = "newlib"))]
src/syscalls/entropy.rs:62:#[no_mangle]
src/syscalls/entropy.rs-63-pub unsafe extern "C" fn sys_secure_rand32(value: *mut u32) -> i32 {
--
src/syscalls/entropy.rs-82-#[cfg(not(feature = "newlib"))]
src/syscalls/entropy.rs:83:#[no_mangle]
src/syscalls/entropy.rs-84-pub unsafe extern "C" fn sys_secure_rand64(value: *mut u64) -> i32 {
--
src/syscalls/entropy.rs-105-/// in the range of 0 to RAND_MAX
src/syscalls/entropy.rs:106:#[no_mangle]
src/syscalls/entropy.rs-107-pub extern "C" fn sys_rand() -> u32 {
--
src/syscalls/entropy.rs-116-/// of pseudo-random numbers to be returned by rand()
src/syscalls/entropy.rs:117:#[no_mangle]
src/syscalls/entropy.rs-118-pub extern "C" fn sys_srand(seed: u32) {
--
src/syscalls/system.rs-6-
src/syscalls/system.rs:7:#[no_mangle]
src/syscalls/system.rs-8-pub extern "C" fn sys_getpagesize() -> i32 {
--
src/syscalls/net.rs-122-
src/syscalls/net.rs:123:#[no_mangle]
src/syscalls/net.rs-124-pub extern "C" fn sys_socket(domain: i32, type_: i32, protocol: i32) -> i32 {
--
src/syscalls/net.rs-127-
src/syscalls/net.rs:128:#[no_mangle]
src/syscalls/net.rs-129-pub extern "C" fn sys_accept(s: i32, addr: *mut sockaddr, addrlen: *mut socklen_t) -> i32 {
--
src/syscalls/net.rs-132-
src/syscalls/net.rs:133:#[no_mangle]
src/syscalls/net.rs-134-pub extern "C" fn sys_listen(s: i32, backlog: i32) -> i32 {
--
src/syscalls/net.rs-137-
src/syscalls/net.rs:138:#[no_mangle]
src/syscalls/net.rs-139-pub extern "C" fn sys_bind(s: i32, name: *const sockaddr, namelen: socklen_t) -> i32 {
--
src/syscalls/net.rs-142-
src/syscalls/net.rs:143:#[no_mangle]
src/syscalls/net.rs-144-pub extern "C" fn sys_connect(s: i32, name: *const sockaddr, namelen: socklen_t) -> i32 {
--
src/syscalls/net.rs-147-
src/syscalls/net.rs:148:#[no_mangle]
src/syscalls/net.rs-149-pub extern "C" fn sys_getsockname(s: i32, name: *mut sockaddr, namelen: *mut socklen_t) -> i32 {
--
src/syscalls/net.rs-152-
src/syscalls/net.rs:153:#[no_mangle]
src/syscalls/net.rs-154-pub extern "C" fn sys_setsockopt(
--
src/syscalls/net.rs-163-
src/syscalls/net.rs:164:#[no_mangle]
src/syscalls/net.rs-165-pub extern "C" fn getsockopt( //why is this not sys_
--
src/syscalls/net.rs-174-
src/syscalls/net.rs:175:#[no_mangle]
src/syscalls/net.rs-176-pub extern "C" fn sys_getpeername(s: i32, name: *mut sockaddr, namelen: *mut socklen_t) -> i32 {
--
src/syscalls/net.rs-179-
src/syscalls/net.rs:180:#[no_mangle]
src/syscalls/net.rs-181-pub extern "C" fn sys_freeaddrinfo(ai: *mut addrinfo) {
--
src/syscalls/net.rs-184-
src/syscalls/net.rs:185:#[no_mangle]
src/syscalls/net.rs-186-pub extern "C" fn sys_getaddrinfo(
--
src/syscalls/net.rs-194-
src/syscalls/net.rs:195:#[no_mangle]
src/syscalls/net.rs-196-pub extern "C" fn sys_send(s: i32, mem: *const c_void, len: usize, _flags: i32) -> isize {
--
src/syscalls/net.rs-199-
src/syscalls/net.rs:200:#[no_mangle]
src/syscalls/net.rs-201-pub extern "C" fn sys_shutdown_socket(s: i32, how: i32) -> i32 {
--
src/syscalls/net.rs-204-
src/syscalls/net.rs:205:#[no_mangle]
src/syscalls/net.rs-206-pub extern "C" fn sys_recv(fd: i32, buf: *mut u8, len: usize, flags: i32) -> isize {

Tier 3 (stub impl or rust impl)
--
src/syscalls/tasks.rs-28-
src/syscalls/tasks.rs:29:#[no_mangle]
src/syscalls/tasks.rs-30-pub extern "C" fn sys_getpid() -> Tid {
--
src/syscalls/tasks.rs-45-#[cfg(feature = "newlib")]
src/syscalls/tasks.rs:46:#[no_mangle]
src/syscalls/tasks.rs-47-pub extern "C" fn sys_getprio(id: *const Tid) -> i32 {
--
src/syscalls/tasks.rs-51-#[cfg(feature = "newlib")]
src/syscalls/tasks.rs:52:#[no_mangle]
src/syscalls/tasks.rs-53-pub extern "C" fn sys_setprio(_id: *const Tid, _prio: i32) -> i32 {
--
src/syscalls/tasks.rs-341-/// Determine the priority of the current thread
src/syscalls/tasks.rs:342:#[no_mangle]
src/syscalls/tasks.rs-343-pub extern "C" fn sys_get_priority() -> u8 {
--
src/syscalls/tasks.rs-357-/// Set priority of the thread with the identifier `id`
src/syscalls/tasks.rs:358:#[no_mangle]
src/syscalls/tasks.rs-359-pub extern "C" fn sys_set_priority(id: Tid, prio: u8) {
--
src/syscalls/tasks.rs-371-/// Set priority of the current thread
src/syscalls/tasks.rs:372:#[no_mangle]
src/syscalls/tasks.rs-373-pub extern "C" fn sys_set_current_task_priority(prio: u8) {
--
src/syscalls/lwip.rs-13-
src/syscalls/lwip.rs:14:#[no_mangle]
src/syscalls/lwip.rs-15-pub extern "C" fn sys_lwip_get_errno() -> i32 {
--
src/syscalls/lwip.rs-22-
src/syscalls/lwip.rs:23:#[no_mangle]
src/syscalls/lwip.rs-24-pub extern "C" fn sys_lwip_set_errno(errno: i32) {
--
src/syscalls/lwip.rs-33-
src/syscalls/lwip.rs:34:#[no_mangle]
src/syscalls/lwip.rs-35-pub extern "C" fn sys_acquire_putchar_lock() {
--
src/syscalls/lwip.rs-42-
src/syscalls/lwip.rs:43:#[no_mangle]
src/syscalls/lwip.rs-44-pub extern "C" fn sys_putchar(character: u8) {
--
src/syscalls/lwip.rs-53-
src/syscalls/lwip.rs:54:#[no_mangle]
src/syscalls/lwip.rs-55-pub extern "C" fn sys_release_putchar_lock() {
--
src/syscalls/condvar.rs-42-
src/syscalls/condvar.rs:43:#[no_mangle]
src/syscalls/condvar.rs-44-pub unsafe extern "C" fn sys_destroy_queue(ptr: usize) -> i32 {
--
src/syscalls/condvar.rs-83-
src/syscalls/condvar.rs:84:#[no_mangle]
src/syscalls/condvar.rs-85-pub unsafe extern "C" fn sys_notify(ptr: usize, count: i32) -> i32 {
--
src/syscalls/condvar.rs-106-
src/syscalls/condvar.rs:107:#[no_mangle]
src/syscalls/condvar.rs-108-pub unsafe extern "C" fn sys_init_queue(ptr: usize) -> i32 {
--
src/syscalls/condvar.rs-138-
src/syscalls/condvar.rs:139:#[no_mangle]
src/syscalls/condvar.rs-140-pub unsafe extern "C" fn sys_add_queue(ptr: usize, timeout_ns: i64) -> i32 {
--
src/syscalls/condvar.rs-164-
src/syscalls/condvar.rs:165:#[no_mangle]
src/syscalls/condvar.rs-166-pub unsafe extern "C" fn sys_wait(ptr: usize) -> i32 {

Tier 4 IDK
--
src/syscalls/tasks.rs-108-#[cfg(feature = "newlib")]
src/syscalls/tasks.rs:109:#[no_mangle]
src/syscalls/tasks.rs-110-pub extern "C" fn sys_sbrk(incr: isize) -> usize {




Tier 5 (probably don't need)
--
src/arch/aarch64/kernel/start.rs-14-/// Entrypoint - Initialize Stack pointer and Exception Table
src/arch/aarch64/kernel/start.rs:15:#[no_mangle]
src/arch/aarch64/kernel/start.rs-16-#[naked]
--
src/arch/aarch64/kernel/start.rs-45-#[inline(never)]
src/arch/aarch64/kernel/start.rs:46:#[no_mangle]
src/arch/aarch64/kernel/start.rs-47-unsafe extern "C" fn pre_init(boot_info: &'static RawBootInfo, cpu_id: u32) -> ! {
--
src/arch/aarch64/mm/paging.rs-580-
src/arch/aarch64/mm/paging.rs:581:#[no_mangle]
src/arch/aarch64/mm/paging.rs-582-pub extern "C" fn virt_to_phys(virtual_address: VirtAddr) -> PhysAddr {
--
src/arch/aarch64/kernel/interrupts.rs-219-
src/arch/aarch64/kernel/interrupts.rs:220:#[no_mangle]
src/arch/aarch64/kernel/interrupts.rs-221-pub(crate) extern "C" fn do_error(_state: &State) -> ! {
--
src/arch/aarch64/kernel/interrupts.rs-104-
src/arch/aarch64/kernel/interrupts.rs:105:#[no_mangle]
src/arch/aarch64/kernel/interrupts.rs-106-pub(crate) extern "C" fn do_fiq(state: &State) -> *mut usize {
--
src/arch/aarch64/kernel/interrupts.rs-140-
src/arch/aarch64/kernel/interrupts.rs:141:#[no_mangle]
src/arch/aarch64/kernel/interrupts.rs-142-pub(crate) extern "C" fn do_irq(state: &State) -> *mut usize {
--
src/arch/aarch64/kernel/interrupts.rs-176-
src/arch/aarch64/kernel/interrupts.rs:177:#[no_mangle]
src/arch/aarch64/kernel/interrupts.rs-178-pub(crate) extern "C" fn do_sync(state: &State) {
--
src/arch/aarch64/kernel/interrupts.rs-212-
src/arch/aarch64/kernel/interrupts.rs:213:#[no_mangle]
src/arch/aarch64/kernel/interrupts.rs-214-pub(crate) extern "C" fn do_bad_mode(_state: &State, reason: u32) -> ! {
--
src/arch/aarch64/kernel/scheduler.rs-387-
src/arch/aarch64/kernel/scheduler.rs:388:#[no_mangle]
src/arch/aarch64/kernel/scheduler.rs-389-pub(crate) extern "C" fn get_last_stack_pointer() -> u64 {
